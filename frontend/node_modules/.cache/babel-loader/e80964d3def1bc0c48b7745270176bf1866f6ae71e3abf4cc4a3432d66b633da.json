{"ast":null,"code":"var _jsxFileName = \"/Users/mayamon/Desktop/dev projs/list-app/frontend/src/components/TickBox.js\",\n  _s = $RefreshSig$();\nimport React from 'react';\nimport { useState } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst TickBox = ({\n  task\n}) => {\n  _s();\n  const [isChecked, setIsChecked] = useState(task.completed);\n  const updateCompleted = async e => {\n    try {\n      const response = await fetch(`${process.env.REACT_APP_SERVERURL}/tasks/${task.id}/completed`, {\n        method: 'PUT',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          completed: !isChecked\n        })\n      });\n      if (!response.ok) {\n        throw new Error('Failed to update task');\n      }\n      setIsChecked(!isChecked);\n      console.log('task is', !isChecked, task.id);\n    } catch (error) {\n      console.error('Error updating task', error);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"checkbox\",\n      checked: isChecked,\n      onChange: updateCompleted\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 28,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 27,\n    columnNumber: 5\n  }, this);\n};\n_s(TickBox, \"HGWuXgSoqME/SRJvgdVjeWj1YX0=\");\n_c = TickBox;\nexport default TickBox;\nvar _c;\n$RefreshReg$(_c, \"TickBox\");","map":{"version":3,"names":["React","useState","jsxDEV","_jsxDEV","TickBox","task","_s","isChecked","setIsChecked","completed","updateCompleted","e","response","fetch","process","env","REACT_APP_SERVERURL","id","method","headers","body","JSON","stringify","ok","Error","console","log","error","children","type","checked","onChange","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/mayamon/Desktop/dev projs/list-app/frontend/src/components/TickBox.js"],"sourcesContent":["import React from 'react';\nimport { useState } from 'react';\n\nconst TickBox = ({ task }) => {\n  const [isChecked, setIsChecked] = useState(task.completed);\n\n  const updateCompleted = async (e) => {\n    try {\n      const response = await fetch(`${process.env.REACT_APP_SERVERURL}/tasks/${task.id}/completed`, {\n        method: 'PUT',\n        headers: {\n            'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({ completed: !isChecked })\n    });\n      if (!response.ok) {\n        throw new Error('Failed to update task');\n      }\n      setIsChecked(!isChecked);\n      console.log('task is', !isChecked, task.id);\n    } catch (error) {\n      console.error('Error updating task', error);\n    }\n  };\n\n  return (\n    <div>\n      <input \n        type=\"checkbox\" \n        checked={isChecked} \n        onChange={updateCompleted} \n      />\n    </div>\n  );\n}\n\nexport default TickBox;"],"mappings":";;AAAA,OAAOA,KAAK,MAAM,OAAO;AACzB,SAASC,QAAQ,QAAQ,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEjC,MAAMC,OAAO,GAAGA,CAAC;EAAEC;AAAK,CAAC,KAAK;EAAAC,EAAA;EAC5B,MAAM,CAACC,SAAS,EAAEC,YAAY,CAAC,GAAGP,QAAQ,CAACI,IAAI,CAACI,SAAS,CAAC;EAE1D,MAAMC,eAAe,GAAG,MAAOC,CAAC,IAAK;IACnC,IAAI;MACF,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAE,GAAEC,OAAO,CAACC,GAAG,CAACC,mBAAoB,UAASX,IAAI,CAACY,EAAG,YAAW,EAAE;QAC5FC,MAAM,EAAE,KAAK;QACbC,OAAO,EAAE;UACL,cAAc,EAAE;QACpB,CAAC;QACDC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC;UAAEb,SAAS,EAAE,CAACF;QAAU,CAAC;MAClD,CAAC,CAAC;MACA,IAAI,CAACK,QAAQ,CAACW,EAAE,EAAE;QAChB,MAAM,IAAIC,KAAK,CAAC,uBAAuB,CAAC;MAC1C;MACAhB,YAAY,CAAC,CAACD,SAAS,CAAC;MACxBkB,OAAO,CAACC,GAAG,CAAC,SAAS,EAAE,CAACnB,SAAS,EAAEF,IAAI,CAACY,EAAE,CAAC;IAC7C,CAAC,CAAC,OAAOU,KAAK,EAAE;MACdF,OAAO,CAACE,KAAK,CAAC,qBAAqB,EAAEA,KAAK,CAAC;IAC7C;EACF,CAAC;EAED,oBACExB,OAAA;IAAAyB,QAAA,eACEzB,OAAA;MACE0B,IAAI,EAAC,UAAU;MACfC,OAAO,EAAEvB,SAAU;MACnBwB,QAAQ,EAAErB;IAAgB;MAAAsB,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAC3B;EAAC;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACC,CAAC;AAEV,CAAC;AAAA7B,EAAA,CA/BKF,OAAO;AAAAgC,EAAA,GAAPhC,OAAO;AAiCb,eAAeA,OAAO;AAAC,IAAAgC,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}