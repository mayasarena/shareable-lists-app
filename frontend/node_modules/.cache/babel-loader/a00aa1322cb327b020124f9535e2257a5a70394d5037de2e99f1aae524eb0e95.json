{"ast":null,"code":"var _jsxFileName = \"/Users/mayamon/Desktop/dev projs/list-app/front/src/contexts/DataContext.js\",\n  _s = $RefreshSig$();\nimport React, { createContext, useState, useContext, useEffect } from 'react';\nimport { UserContext } from './UserContext';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const DataContext = /*#__PURE__*/createContext();\nexport const DataProvider = ({\n  children\n}) => {\n  _s();\n  const {\n    user\n  } = useContext(UserContext);\n  const [data, setData] = useState(null);\n  const getData = async () => {\n    if (user) {\n      try {\n        const listsResponse = await fetch(`${process.env.REACT_APP_SERVERURL}/lists/${user.uid}`);\n        const listsJson = await listsResponse.json();\n        const listsWithTasks = await Promise.all(listsJson.map(async list => {\n          const tasksResponse = await fetch(`${process.env.REACT_APP_SERVERURL}/tasks/${list.id}`);\n          const tasksJson = await tasksResponse.json();\n          return {\n            ...list,\n            tasks: tasksJson\n          };\n        }));\n        setData(listsWithTasks);\n      } catch (error) {\n        console.error(error);\n      }\n    } else {\n      console.error('No user.');\n    }\n  };\n  const getSharedLists = async () => {\n    if (user) {\n      try {\n        const sharedListsResponse = await fetch(`${process.env.REACT_APP_SERVERURL}/shared_lists/${user.uid}`);\n        const sharedListsJson = await sharedListsResponse.json();\n\n        // Fetch tasks for each shared list\n        const sharedListsWithTasks = await Promise.all(sharedListsJson.map(async sharedList => {\n          const tasksResponse = await fetch(`${process.env.REACT_APP_SERVERURL}/tasks/${sharedList.list_id}`);\n          const tasksJson = await tasksResponse.json();\n          return {\n            ...sharedList,\n            tasks: tasksJson\n          };\n        }));\n        setData(prevData => prevData ? [...prevData, ...sharedListsWithTasks] : sharedListsWithTasks);\n      } catch (error) {\n        console.error('Error fetching shared lists:', error);\n      }\n    } else {\n      console.error('No user.');\n    }\n  };\n  useEffect(() => {\n    getData();\n    getSharedLists();\n  }, [user]); // Fetch data whenever user changes\n\n  return /*#__PURE__*/_jsxDEV(DataContext.Provider, {\n    value: {\n      data,\n      getData\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 59,\n    columnNumber: 5\n  }, this);\n};\n_s(DataProvider, \"V7Wym9H+/OBPg12Yvbdfi5iELX8=\");\n_c = DataProvider;\nvar _c;\n$RefreshReg$(_c, \"DataProvider\");","map":{"version":3,"names":["React","createContext","useState","useContext","useEffect","UserContext","jsxDEV","_jsxDEV","DataContext","DataProvider","children","_s","user","data","setData","getData","listsResponse","fetch","process","env","REACT_APP_SERVERURL","uid","listsJson","json","listsWithTasks","Promise","all","map","list","tasksResponse","id","tasksJson","tasks","error","console","getSharedLists","sharedListsResponse","sharedListsJson","sharedListsWithTasks","sharedList","list_id","prevData","Provider","value","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/mayamon/Desktop/dev projs/list-app/front/src/contexts/DataContext.js"],"sourcesContent":["import React, { createContext, useState, useContext, useEffect } from 'react';\nimport { UserContext } from './UserContext';\n\nexport const DataContext = createContext();\n\nexport const DataProvider = ({ children }) => {\n    const { user } = useContext(UserContext);\n    const [data, setData] = useState(null);\n\n    const getData = async () => {\n      if (user) {\n          try {\n              const listsResponse = await fetch(`${process.env.REACT_APP_SERVERURL}/lists/${user.uid}`)\n              const listsJson = await listsResponse.json()\n              const listsWithTasks = await Promise.all(\n                  listsJson.map(async (list) => {\n                      const tasksResponse = await fetch(`${process.env.REACT_APP_SERVERURL}/tasks/${list.id}`)\n                      const tasksJson = await tasksResponse.json();\n                      return { ...list, tasks: tasksJson };\n                  })\n              );\n              setData(listsWithTasks)\n          } catch (error) {\n              console.error(error)\n          }\n      } else {\n          console.error('No user.')\n      }\n  };\n\n  const getSharedLists = async () => {\n        if (user) {\n            try {\n                const sharedListsResponse = await fetch(`${process.env.REACT_APP_SERVERURL}/shared_lists/${user.uid}`);\n                const sharedListsJson = await sharedListsResponse.json();\n                \n                // Fetch tasks for each shared list\n                const sharedListsWithTasks = await Promise.all(sharedListsJson.map(async (sharedList) => {\n                    const tasksResponse = await fetch(`${process.env.REACT_APP_SERVERURL}/tasks/${sharedList.list_id}`);\n                    const tasksJson = await tasksResponse.json();\n                    return { ...sharedList, tasks: tasksJson };\n                }));\n\n                setData((prevData) => (prevData ? [...prevData, ...sharedListsWithTasks] : sharedListsWithTasks));\n            } catch (error) {\n                console.error('Error fetching shared lists:', error);\n            }\n        } else {\n            console.error('No user.');\n        }\n    };\n\n  useEffect(() => {\n    getData();\n    getSharedLists();\n}, [user]); // Fetch data whenever user changes\n\n  return (\n    <DataContext.Provider value={{ data, getData }}>\n      {children}\n    </DataContext.Provider>\n  );\n};"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}