{"ast":null,"code":"var _jsxFileName = \"/Users/mayamon/Desktop/dev projs/list-app/frontend/src/components/ShareList.js\",\n  _s = $RefreshSig$();\nimport React from 'react';\nimport { useState, useEffect, useContext } from 'react';\nimport { ShareListContainer, ShareButton, UserIcon } from '../styles/ShareList.styled';\nimport ShareListModal from './ShareListModal';\nimport { UserContext } from '../contexts/UserContext';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ShareList = ({\n  list\n}) => {\n  _s();\n  const [showShareListModal, setShowShareListModal] = useState(false); // controls the state of the list modal object\n  const [sharedUsers, setSharedUsers] = useState(null);\n  const {\n    user\n  } = useContext(UserContext);\n  const [mousePosition, setMousePosition] = useState({\n    mouseX: null,\n    mouseY: null\n  });\n  const fetchSharedUsers = async () => {\n    try {\n      const response = await fetch(`${process.env.REACT_APP_SERVERURL}/shared_lists/${list.id}/users`);\n      if (response.ok) {\n        const sharedUsersData = await response.json();\n        setSharedUsers(sharedUsersData);\n      }\n    } catch (error) {\n      console.error('Error fetching shared lists:', error);\n    }\n  };\n  useEffect(() => {\n    fetchSharedUsers();\n  }, [list]);\n  const handleMouseMove = e => {\n    const mouseX = e.clientX;\n    const mouseY = e.clientY;\n    setMousePosition({\n      mouseX,\n      mouseY\n    });\n  };\n  const backgroundColors = ['#ccfab1', '#f7bece', '#f4d4ff', '#ccffed', '#bbc1fc', '#ffe0bf'];\n  const textColors = ['#4fb05f', '#b53147', '#7e2f99', '#2c8565', '#3d46a1', '#c77a28'];\n  const getRandomColor = () => {\n    const randomIndex = Math.floor(Math.random() * backgroundColors.length);\n    return backgroundColors[randomIndex];\n  };\n\n  // Function to select a predetermined text color for contrast\n  const getTextColor = backgroundColor => {\n    const index = backgroundColors.indexOf(backgroundColor);\n    return textColors[index];\n  };\n  return /*#__PURE__*/_jsxDEV(ShareListContainer, {\n    children: [sharedUsers === null || sharedUsers === void 0 ? void 0 : sharedUsers.map(user => {\n      const randomColor = getRandomColor();\n      return /*#__PURE__*/_jsxDEV(UserIcon, {\n        onMouseMove: handleMouseMove,\n        backgroundcolor: randomColor,\n        textcolor: getTextColor(randomColor),\n        email: user.email,\n        mouseX: mousePosition.mouseX,\n        mouseY: mousePosition.mouseY,\n        children: user.name[0]\n      }, user.id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 54,\n        columnNumber: 21\n      }, this);\n    }), list.owner_id === user.uid && /*#__PURE__*/_jsxDEV(ShareButton, {\n      onClick: () => setShowShareListModal(true),\n      children: \"Share\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 17\n    }, this), showShareListModal && /*#__PURE__*/_jsxDEV(ShareListModal, {\n      setShowModal: setShowShareListModal,\n      list: list\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 36\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 50,\n    columnNumber: 9\n  }, this);\n};\n_s(ShareList, \"TLWectx+odvgHiCHrU5asrM+w88=\");\n_c = ShareList;\nexport default ShareList;\nvar _c;\n$RefreshReg$(_c, \"ShareList\");","map":{"version":3,"names":["React","useState","useEffect","useContext","ShareListContainer","ShareButton","UserIcon","ShareListModal","UserContext","jsxDEV","_jsxDEV","ShareList","list","_s","showShareListModal","setShowShareListModal","sharedUsers","setSharedUsers","user","mousePosition","setMousePosition","mouseX","mouseY","fetchSharedUsers","response","fetch","process","env","REACT_APP_SERVERURL","id","ok","sharedUsersData","json","error","console","handleMouseMove","e","clientX","clientY","backgroundColors","textColors","getRandomColor","randomIndex","Math","floor","random","length","getTextColor","backgroundColor","index","indexOf","children","map","randomColor","onMouseMove","backgroundcolor","textcolor","email","name","fileName","_jsxFileName","lineNumber","columnNumber","owner_id","uid","onClick","setShowModal","_c","$RefreshReg$"],"sources":["/Users/mayamon/Desktop/dev projs/list-app/frontend/src/components/ShareList.js"],"sourcesContent":["import React from 'react';\nimport { useState, useEffect, useContext } from 'react';\nimport { ShareListContainer, ShareButton, UserIcon } from '../styles/ShareList.styled';\nimport ShareListModal from './ShareListModal';\nimport { UserContext } from '../contexts/UserContext';\n\nconst ShareList = ({ list }) => {\n    const [showShareListModal, setShowShareListModal] = useState(false); // controls the state of the list modal object\n    const [sharedUsers, setSharedUsers] = useState(null);\n    const { user } = useContext(UserContext);\n    const [mousePosition, setMousePosition] = useState({ mouseX: null, mouseY: null });\n    \n    const fetchSharedUsers = async () => {\n        try {\n            const response = await fetch(`${process.env.REACT_APP_SERVERURL}/shared_lists/${list.id}/users`);\n            if (response.ok) {\n                const sharedUsersData = await response.json();\n                setSharedUsers(sharedUsersData);\n            }\n        } catch (error) {\n            console.error('Error fetching shared lists:', error);\n        }\n    };\n\n    useEffect(() => {\n        fetchSharedUsers();\n    }, [list]);\n\n    const handleMouseMove = (e) => {\n        const mouseX = e.clientX;\n        const mouseY = e.clientY;\n        setMousePosition({ mouseX, mouseY });\n    }\n\n    const backgroundColors = ['#ccfab1', '#f7bece', '#f4d4ff', '#ccffed', '#bbc1fc', '#ffe0bf']\n    const textColors = ['#4fb05f', '#b53147', '#7e2f99', '#2c8565', '#3d46a1', '#c77a28']\n\n    const getRandomColor = () => {\n        const randomIndex = Math.floor(Math.random() * backgroundColors.length);\n        return backgroundColors[randomIndex];\n    };\n\n    // Function to select a predetermined text color for contrast\n    const getTextColor = (backgroundColor) => {\n        const index = backgroundColors.indexOf(backgroundColor);\n        return textColors[index];\n    };\n\n    return (\n        <ShareListContainer>\n            {sharedUsers?.map((user) => {\n                const randomColor = getRandomColor();\n                return (\n                    <UserIcon \n                        onMouseMove={handleMouseMove}\n                        key={user.id} \n                        backgroundcolor={randomColor}\n                        textcolor={getTextColor(randomColor)}\n                        email={user.email}\n                        mouseX={mousePosition.mouseX}\n                        mouseY={mousePosition.mouseY}\n                    >\n                        { user.name[0] } \n                    </UserIcon>\n                );\n            })}\n            {(list.owner_id === user.uid) && (\n                <ShareButton onClick={() => setShowShareListModal(true)}>Share</ShareButton>\n            )}\n            {showShareListModal && <ShareListModal setShowModal={setShowShareListModal} list={list} />}\n        </ShareListContainer>\n  );\n}\n\nexport default ShareList;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}