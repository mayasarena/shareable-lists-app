{"ast":null,"code":"var _jsxFileName = \"/Users/mayamon/Desktop/dev projs/list-app/frontend/src/components/TickBox.js\",\n  _s = $RefreshSig$();\nimport React from 'react';\nimport { useState, useContext, useEffect } from 'react';\nimport { CheckboxContainer, Checkmark } from '../styles/TickBox.styled';\nimport { DataContext } from '../contexts/DataContext';\nimport { UserContext } from '../contexts/UserContext';\nimport io from 'socket.io-client';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst socket = io('http://localhost:8000');\nconst TickBox = ({\n  list,\n  task,\n  margin\n}) => {\n  _s();\n  const [isChecked, setIsChecked] = useState(task.completed);\n  const {\n    getLists,\n    getSharedLists\n  } = useContext(DataContext);\n  const {\n    user\n  } = useContext(UserContext);\n  useEffect(() => {\n    socket.on('tasksUpdated', () => {\n      console.log('check updated updated in this list');\n      // update state, perform actions here\n      if (user.uid === list.owner_id) {\n        getLists();\n      } else {\n        getSharedLists();\n      }\n    });\n\n    // Clean up event listener\n    return () => {\n      socket.off('tasksUpdated');\n    };\n  }, []);\n  const updateCompleted = async e => {\n    try {\n      const response = await fetch(`${process.env.REACT_APP_SERVERURL}/tasks/${task.id}/completed`, {\n        method: 'PUT',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          completed: !isChecked\n        })\n      });\n      if (!response.ok) {\n        throw new Error('Failed to update task');\n      }\n      setIsChecked(!isChecked);\n      if (list.shared === true) {\n        getSharedLists();\n      } else {\n        getLists();\n      }\n    } catch (error) {\n      console.error('Error updating task', error);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(CheckboxContainer, {\n    margin: margin,\n    children: [/*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"checkbox\",\n      checked: isChecked,\n      onChange: updateCompleted\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Checkmark, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 57,\n    columnNumber: 5\n  }, this);\n};\n_s(TickBox, \"x149Nq73wq+t6Y3Dp7XDO5cKFzM=\");\n_c = TickBox;\nexport default TickBox;\nvar _c;\n$RefreshReg$(_c, \"TickBox\");","map":{"version":3,"names":["React","useState","useContext","useEffect","CheckboxContainer","Checkmark","DataContext","UserContext","io","jsxDEV","_jsxDEV","socket","TickBox","list","task","margin","_s","isChecked","setIsChecked","completed","getLists","getSharedLists","user","on","console","log","uid","owner_id","off","updateCompleted","e","response","fetch","process","env","REACT_APP_SERVERURL","id","method","headers","body","JSON","stringify","ok","Error","shared","error","children","type","checked","onChange","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/mayamon/Desktop/dev projs/list-app/frontend/src/components/TickBox.js"],"sourcesContent":["import React from 'react';\nimport { useState, useContext, useEffect } from 'react';\nimport { CheckboxContainer, Checkmark } from '../styles/TickBox.styled';\nimport { DataContext } from '../contexts/DataContext';\nimport { UserContext } from '../contexts/UserContext';\nimport io from 'socket.io-client';\n\nconst socket = io('http://localhost:8000');\n\nconst TickBox = ({ list, task, margin }) => {\n  const [isChecked, setIsChecked] = useState(task.completed);\n  const { getLists, getSharedLists } = useContext(DataContext);\n  const { user } = useContext(UserContext);\n\n  useEffect(() => {\n    socket.on('tasksUpdated', () => {\n      console.log('check updated updated in this list');\n      // update state, perform actions here\n      if (user.uid === list.owner_id) {\n        getLists();\n      } else {\n        getSharedLists();\n      }\n    });\n\n    // Clean up event listener\n    return () => {\n      socket.off('tasksUpdated');\n    };\n  }, []);\n\n\n  const updateCompleted = async (e) => {\n    try {\n      const response = await fetch(`${process.env.REACT_APP_SERVERURL}/tasks/${task.id}/completed`, {\n        method: 'PUT',\n        headers: {\n            'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({ completed: !isChecked })\n    });\n      if (!response.ok) {\n        throw new Error('Failed to update task');\n      }\n      setIsChecked(!isChecked);\n      if (list.shared === true) {\n          getSharedLists();\n      } else {\n          getLists();\n      }\n    } catch (error) {\n      console.error('Error updating task', error);\n    }\n  };\n\n  return (\n    <CheckboxContainer margin={margin}>\n      <input \n        type=\"checkbox\" \n        checked={isChecked} \n        onChange={updateCompleted} \n      />\n      <Checkmark />\n    </CheckboxContainer>\n  );\n}\n\nexport default TickBox;"],"mappings":";;AAAA,OAAOA,KAAK,MAAM,OAAO;AACzB,SAASC,QAAQ,EAAEC,UAAU,EAAEC,SAAS,QAAQ,OAAO;AACvD,SAASC,iBAAiB,EAAEC,SAAS,QAAQ,0BAA0B;AACvE,SAASC,WAAW,QAAQ,yBAAyB;AACrD,SAASC,WAAW,QAAQ,yBAAyB;AACrD,OAAOC,EAAE,MAAM,kBAAkB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAElC,MAAMC,MAAM,GAAGH,EAAE,CAAC,uBAAuB,CAAC;AAE1C,MAAMI,OAAO,GAAGA,CAAC;EAAEC,IAAI;EAAEC,IAAI;EAAEC;AAAO,CAAC,KAAK;EAAAC,EAAA;EAC1C,MAAM,CAACC,SAAS,EAAEC,YAAY,CAAC,GAAGjB,QAAQ,CAACa,IAAI,CAACK,SAAS,CAAC;EAC1D,MAAM;IAAEC,QAAQ;IAAEC;EAAe,CAAC,GAAGnB,UAAU,CAACI,WAAW,CAAC;EAC5D,MAAM;IAAEgB;EAAK,CAAC,GAAGpB,UAAU,CAACK,WAAW,CAAC;EAExCJ,SAAS,CAAC,MAAM;IACdQ,MAAM,CAACY,EAAE,CAAC,cAAc,EAAE,MAAM;MAC9BC,OAAO,CAACC,GAAG,CAAC,oCAAoC,CAAC;MACjD;MACA,IAAIH,IAAI,CAACI,GAAG,KAAKb,IAAI,CAACc,QAAQ,EAAE;QAC9BP,QAAQ,CAAC,CAAC;MACZ,CAAC,MAAM;QACLC,cAAc,CAAC,CAAC;MAClB;IACF,CAAC,CAAC;;IAEF;IACA,OAAO,MAAM;MACXV,MAAM,CAACiB,GAAG,CAAC,cAAc,CAAC;IAC5B,CAAC;EACH,CAAC,EAAE,EAAE,CAAC;EAGN,MAAMC,eAAe,GAAG,MAAOC,CAAC,IAAK;IACnC,IAAI;MACF,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAE,GAAEC,OAAO,CAACC,GAAG,CAACC,mBAAoB,UAASrB,IAAI,CAACsB,EAAG,YAAW,EAAE;QAC5FC,MAAM,EAAE,KAAK;QACbC,OAAO,EAAE;UACL,cAAc,EAAE;QACpB,CAAC;QACDC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC;UAAEtB,SAAS,EAAE,CAACF;QAAU,CAAC;MAClD,CAAC,CAAC;MACA,IAAI,CAACc,QAAQ,CAACW,EAAE,EAAE;QAChB,MAAM,IAAIC,KAAK,CAAC,uBAAuB,CAAC;MAC1C;MACAzB,YAAY,CAAC,CAACD,SAAS,CAAC;MACxB,IAAIJ,IAAI,CAAC+B,MAAM,KAAK,IAAI,EAAE;QACtBvB,cAAc,CAAC,CAAC;MACpB,CAAC,MAAM;QACHD,QAAQ,CAAC,CAAC;MACd;IACF,CAAC,CAAC,OAAOyB,KAAK,EAAE;MACdrB,OAAO,CAACqB,KAAK,CAAC,qBAAqB,EAAEA,KAAK,CAAC;IAC7C;EACF,CAAC;EAED,oBACEnC,OAAA,CAACN,iBAAiB;IAACW,MAAM,EAAEA,MAAO;IAAA+B,QAAA,gBAChCpC,OAAA;MACEqC,IAAI,EAAC,UAAU;MACfC,OAAO,EAAE/B,SAAU;MACnBgC,QAAQ,EAAEpB;IAAgB;MAAAqB,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAC3B,CAAC,eACF3C,OAAA,CAACL,SAAS;MAAA6C,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACI,CAAC;AAExB,CAAC;AAAArC,EAAA,CAxDKJ,OAAO;AAAA0C,EAAA,GAAP1C,OAAO;AA0Db,eAAeA,OAAO;AAAC,IAAA0C,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}