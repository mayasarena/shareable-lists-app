{"ast":null,"code":"var _jsxFileName = \"/Users/mayamon/Desktop/dev projs/list-app/frontend/src/components/AddTask.js\",\n  _s = $RefreshSig$();\nimport React from 'react';\nimport { useState, useContext } from 'react';\nimport { useCookies } from 'react-cookie';\nimport { DataContext } from '../contexts/DataContext';\nimport { UserContext } from '../contexts/UserContext';\nimport { faPlus } from '@fortawesome/free-solid-svg-icons';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { Form, TextInput, TextContainer, ButtonInput } from '../styles/AddTask.styled';\n\n// Define the AddTask component responsible for adding new tasks to a list\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst AddTask = ({\n  list\n}) => {\n  _s();\n  // Accessing functions to get lists and shared lists from the DataContext\n  const {\n    getLists,\n    getSharedLists\n  } = useContext(DataContext);\n  // Accessing user data from the UserContext\n  const {\n    user\n  } = useContext(UserContext);\n\n  // State to store task data\n  const [taskData, setTaskData] = useState({\n    list_id: list.id,\n    title: '',\n    completed: false,\n    creator_id: user.uid,\n    created_date: null,\n    last_edited_by: null\n  });\n\n  // Function to post task data to the server\n  const postTaskData = async e => {\n    e.preventDefault();\n\n    // Check if the task title is empty so the user does not save a task with no title\n    if (!(taskData.title.trim().length > 0)) {\n      console.log('Please write a task');\n      return;\n    }\n    try {\n      // Send POST request to create a new task\n      const response = await fetch(`${process.env.REACT_APP_SERVERURL}/tasks`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify(taskData)\n      });\n      // Check if the request was successful\n      if (!response.ok) {\n        throw new Error('Failed to create task');\n      }\n\n      // Parse the response to get the new task data\n      const newTask = await response.json();\n      console.log('New task created:', newTask);\n      // Update the lists after creating the task\n      getSharedLists();\n      getLists();\n\n      // Clear the task title after adding the task\n      setTaskData(taskData => ({\n        ...taskData,\n        title: ''\n      }));\n    } catch (error) {\n      // Log and throw any errors that occur during the process\n      console.error('Error creating task:', error.message);\n      throw error;\n    }\n  };\n\n  // Function to handle changes in the task title input\n  const handleChange = e => {\n    const {\n      value\n    } = e.target;\n\n    // Update the task data with the new title value and set the creation date\n    setTaskData(taskData => ({\n      ...taskData,\n      created_date: new Date(),\n      title: value\n    }));\n  };\n\n  // Render the AddTask component\n  return /*#__PURE__*/_jsxDEV(Form, {\n    children: [/*#__PURE__*/_jsxDEV(TextContainer, {\n      children: [/*#__PURE__*/_jsxDEV(FontAwesomeIcon, {\n        icon: faPlus\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 88,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(TextInput, {\n        required: true,\n        maxLength: 30,\n        placeholder: \"Task goes here\",\n        name: \"title\",\n        value: taskData.title,\n        onChange: handleChange\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 89,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 87,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(ButtonInput, {\n      type: \"submit\",\n      onClick: postTaskData\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 98,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 86,\n    columnNumber: 9\n  }, this);\n};\n_s(AddTask, \"tWP28aKSgampNZVsTz84ImbREBE=\");\n_c = AddTask;\nexport default AddTask;\nvar _c;\n$RefreshReg$(_c, \"AddTask\");","map":{"version":3,"names":["React","useState","useContext","useCookies","DataContext","UserContext","faPlus","FontAwesomeIcon","Form","TextInput","TextContainer","ButtonInput","jsxDEV","_jsxDEV","AddTask","list","_s","getLists","getSharedLists","user","taskData","setTaskData","list_id","id","title","completed","creator_id","uid","created_date","last_edited_by","postTaskData","e","preventDefault","trim","length","console","log","response","fetch","process","env","REACT_APP_SERVERURL","method","headers","body","JSON","stringify","ok","Error","newTask","json","error","message","handleChange","value","target","Date","children","icon","fileName","_jsxFileName","lineNumber","columnNumber","required","maxLength","placeholder","name","onChange","type","onClick","_c","$RefreshReg$"],"sources":["/Users/mayamon/Desktop/dev projs/list-app/frontend/src/components/AddTask.js"],"sourcesContent":["import React from 'react';\nimport { useState, useContext } from 'react';\nimport { useCookies } from 'react-cookie';\nimport { DataContext } from '../contexts/DataContext';\nimport { UserContext } from '../contexts/UserContext';\nimport { faPlus } from '@fortawesome/free-solid-svg-icons';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { Form, TextInput, TextContainer, ButtonInput } from '../styles/AddTask.styled';\n\n\n// Define the AddTask component responsible for adding new tasks to a list\nconst AddTask = ({ list }) => {\n    // Accessing functions to get lists and shared lists from the DataContext\n    const { getLists, getSharedLists } = useContext(DataContext);\n    // Accessing user data from the UserContext\n    const { user } = useContext(UserContext);\n\n    // State to store task data\n    const [taskData, setTaskData] = useState({\n        list_id: list.id,\n        title: '',\n        completed: false,\n        creator_id: user.uid,\n        created_date: null,\n        last_edited_by: null\n    });\n\n    // Function to post task data to the server\n    const postTaskData = async (e) => {\n        e.preventDefault();\n\n        // Check if the task title is empty so the user does not save a task with no title\n        if (!(taskData.title.trim().length > 0)) {\n            console.log('Please write a task');\n            return;\n        }\n\n        try {\n            // Send POST request to create a new task\n            const response = await fetch(`${process.env.REACT_APP_SERVERURL}/tasks`, {\n                method: 'POST',\n                headers: {\n                    'Content-Type': 'application/json'\n                },\n                body: JSON.stringify(taskData)\n            });\n            // Check if the request was successful\n            if (!response.ok) {\n                throw new Error('Failed to create task');\n            }\n\n            // Parse the response to get the new task data\n            const newTask = await response.json();\n            console.log('New task created:', newTask);\n            // Update the lists after creating the task\n            getSharedLists();\n            getLists();\n\n            // Clear the task title after adding the task\n            setTaskData(taskData => ({\n                ...taskData,\n                title: ''\n            }));\n\n        } catch(error) {\n            // Log and throw any errors that occur during the process\n            console.error('Error creating task:', error.message);\n            throw error;\n        }\n    };\n\n    // Function to handle changes in the task title input\n    const handleChange = (e) => {\n        const { value } = e.target;\n\n        // Update the task data with the new title value and set the creation date\n        setTaskData(taskData => ({\n            ...taskData,\n            created_date: new Date(),\n            title: value\n        }));\n    };\n\n    // Render the AddTask component\n    return (\n        <Form>\n            <TextContainer>\n                <FontAwesomeIcon icon={faPlus} />\n                <TextInput \n                    required \n                    maxLength={30} \n                    placeholder=\"Task goes here\" \n                    name=\"title\"\n                    value={taskData.title} \n                    onChange={handleChange}\n                />\n            </TextContainer>\n            <ButtonInput type=\"submit\" onClick={postTaskData}/>\n        </Form>\n    );\n}\n\nexport default AddTask;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}