{"ast":null,"code":"var _jsxFileName = \"/Users/mayamon/Desktop/dev projs/list-app/frontend/src/contexts/DataContext.js\",\n  _s = $RefreshSig$();\nimport React, { createContext, useState, useContext, useEffect } from 'react';\nimport { UserContext } from './UserContext';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const DataContext = /*#__PURE__*/createContext();\nexport const DataProvider = ({\n  children\n}) => {\n  _s();\n  const {\n    user\n  } = useContext(UserContext);\n  const [lists, setLists] = useState(null);\n  const [sharedLists, setSharedLists] = useState(null);\n  const getLists = async () => {\n    if (user) {\n      try {\n        const listsResponse = await fetch(`${process.env.REACT_APP_SERVERURL}/lists/${user.uid}`);\n        const listsJson = await listsResponse.json();\n        const listsWithTasks = await Promise.all(listsJson.map(async list => {\n          const tasksResponse = await fetch(`${process.env.REACT_APP_SERVERURL}/tasks/${list.id}`);\n          const tasksJson = await tasksResponse.json();\n          const sortedTasks = tasksJson.sort((a, b) => new Date(a.date) - new Date(b.date)); // Sort tasks by date\n          return {\n            ...list,\n            tasks: sortedTasks\n          };\n        }));\n        setLists(listsWithTasks);\n      } catch (error) {\n        console.error(error);\n      }\n    } else {\n      console.error('No user.');\n    }\n  };\n  const getSharedLists = async () => {\n    if (user) {\n      try {\n        const sharedListsResponse = await fetch(`${process.env.REACT_APP_SERVERURL}/shared_lists/${user.uid}/lists`);\n        const sharedListsJson = await sharedListsResponse.json();\n\n        // Fetch tasks for each shared list\n        const sharedListsWithTasks = await Promise.all(sharedListsJson.map(async sharedList => {\n          const tasksResponse = await fetch(`${process.env.REACT_APP_SERVERURL}/tasks/${sharedList.id}`);\n          const tasksJson = await tasksResponse.json();\n          const sortedTasks = tasksJson.sort((a, b) => new Date(a.date) - new Date(b.date)); // Sort tasks by date\n          return {\n            ...sharedList,\n            tasks: sortedTasks\n          };\n        }));\n        setSharedLists(sharedListsWithTasks);\n      } catch (error) {\n        console.error('Error fetching shared lists:', error);\n      }\n    } else {\n      console.error('No user.');\n    }\n  };\n  useEffect(() => {\n    getLists();\n    getSharedLists();\n  }, [user]); // Fetch data whenever user changes\n\n  useEffect(() => {\n    console.log(\"Lists updated\", lists);\n  }, [lists]);\n  useEffect(() => {\n    console.log(\"Shared lists updated\", sharedLists);\n  }, [sharedLists]);\n  return /*#__PURE__*/_jsxDEV(DataContext.Provider, {\n    value: {\n      lists,\n      getLists,\n      sharedLists,\n      getSharedLists\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 69,\n    columnNumber: 5\n  }, this);\n};\n_s(DataProvider, \"VxDkobpGF6h8ay1uATU2vAAvO6I=\");\n_c = DataProvider;\nvar _c;\n$RefreshReg$(_c, \"DataProvider\");","map":{"version":3,"names":["React","createContext","useState","useContext","useEffect","UserContext","jsxDEV","_jsxDEV","DataContext","DataProvider","children","_s","user","lists","setLists","sharedLists","setSharedLists","getLists","listsResponse","fetch","process","env","REACT_APP_SERVERURL","uid","listsJson","json","listsWithTasks","Promise","all","map","list","tasksResponse","id","tasksJson","sortedTasks","sort","a","b","Date","date","tasks","error","console","getSharedLists","sharedListsResponse","sharedListsJson","sharedListsWithTasks","sharedList","log","Provider","value","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/mayamon/Desktop/dev projs/list-app/frontend/src/contexts/DataContext.js"],"sourcesContent":["import React, { createContext, useState, useContext, useEffect } from 'react';\nimport { UserContext } from './UserContext';\n\nexport const DataContext = createContext();\n\nexport const DataProvider = ({ children }) => {\n    const { user } = useContext(UserContext);\n    const [lists, setLists] = useState(null);\n    const [sharedLists, setSharedLists] = useState(null);\n\n    const getLists = async () => {\n      if (user) {\n          try {\n              const listsResponse = await fetch(`${process.env.REACT_APP_SERVERURL}/lists/${user.uid}`)\n              const listsJson = await listsResponse.json()\n              const listsWithTasks = await Promise.all(\n                  listsJson.map(async (list) => {\n                      const tasksResponse = await fetch(`${process.env.REACT_APP_SERVERURL}/tasks/${list.id}`)\n                      const tasksJson = await tasksResponse.json();\n                      const sortedTasks = tasksJson.sort((a, b) => new Date(a.date) - new Date(b.date)); // Sort tasks by date\n                      return { ...list, tasks: sortedTasks };\n                  }));\n              setLists(listsWithTasks);\n          } catch (error) {\n              console.error(error)\n          }\n      } else {\n          console.error('No user.')\n      }\n  };\n\n  const getSharedLists = async () => {\n        if (user) {\n            try {\n                const sharedListsResponse = await fetch(`${process.env.REACT_APP_SERVERURL}/shared_lists/${user.uid}/lists`);\n                const sharedListsJson = await sharedListsResponse.json();\n                \n                // Fetch tasks for each shared list\n                const sharedListsWithTasks = await Promise.all(\n                    sharedListsJson.map(async (sharedList) => {\n                        const tasksResponse = await fetch(`${process.env.REACT_APP_SERVERURL}/tasks/${sharedList.id}`);\n                        const tasksJson = await tasksResponse.json();\n                        const sortedTasks = tasksJson.sort((a, b) => new Date(a.date) - new Date(b.date)); // Sort tasks by date\n                        return { ...sharedList, tasks: sortedTasks };\n                }));\n                setSharedLists(sharedListsWithTasks);\n            } catch (error) {\n                console.error('Error fetching shared lists:', error);\n            }\n        } else {\n            console.error('No user.');\n        }\n    };\n\n  useEffect(() => {\n    getLists();\n    getSharedLists();\n}, [user]); // Fetch data whenever user changes\n\n    useEffect(() => {\n        console.log(\"Lists updated\", lists);\n    }, [lists]);\n\n    useEffect(() => {\n        console.log(\"Shared lists updated\", sharedLists);\n    }, [sharedLists]);\n\n  return (\n    <DataContext.Provider value={{ lists, getLists, sharedLists, getSharedLists }}>\n      {children}\n    </DataContext.Provider>\n  );\n};"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}