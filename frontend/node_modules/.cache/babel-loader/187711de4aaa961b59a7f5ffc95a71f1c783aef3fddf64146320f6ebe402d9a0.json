{"ast":null,"code":"var _jsxFileName = \"/Users/mayamon/Desktop/dev projs/list-app/frontend/src/components/TickBox.js\",\n  _s = $RefreshSig$();\nimport React from 'react';\nimport { useState } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst TickBox = ({\n  task\n}) => {\n  _s();\n  const [completed, setCompleted] = useState(task.completed);\n  const updateCompleted = async () => {\n    try {\n      console.log('id', task.id);\n      const response = await fetch(`${process.env.REACT_APP_SERVERURL}/tasks/${task.id}/completed`, {\n        method: 'PUT',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          completed: !completed\n        })\n      });\n      if (!response.ok) {\n        throw new Error('Failed to update task');\n      }\n      console.log('successfully updated task completion');\n      setCompleted(!completed);\n    } catch (error) {\n      console.error('Error updating task', error);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: updateCompleted,\n      children: completed ? 'Completed' : 'Not Completed'\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 30,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 29,\n    columnNumber: 5\n  }, this);\n};\n_s(TickBox, \"7XsUvji2i7+BIckDIqPP1jvQ5mA=\");\n_c = TickBox;\nexport default TickBox;\nvar _c;\n$RefreshReg$(_c, \"TickBox\");","map":{"version":3,"names":["React","useState","jsxDEV","_jsxDEV","TickBox","task","_s","completed","setCompleted","updateCompleted","console","log","id","response","fetch","process","env","REACT_APP_SERVERURL","method","headers","body","JSON","stringify","ok","Error","error","children","onClick","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/mayamon/Desktop/dev projs/list-app/frontend/src/components/TickBox.js"],"sourcesContent":["import React from 'react';\nimport { useState } from 'react';\n\nconst TickBox = ({ task }) => {\n  const [completed, setCompleted] = useState(task.completed);\n\n  const updateCompleted = async () => {\n    try {\n      console.log('id', task.id)\n      const response = await fetch(`${process.env.REACT_APP_SERVERURL}/tasks/${task.id}/completed`, {\n        method: 'PUT',\n        headers: {\n            'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({ completed: !completed })\n    });\n      if (!response.ok) {\n        throw new Error('Failed to update task');\n      }\n\n      console.log('successfully updated task completion');\n      setCompleted(!completed);\n    } catch (error) {\n      console.error('Error updating task', error);\n    }\n  };\n\n  return (\n    <div>\n      <button onClick={updateCompleted}>{completed ? 'Completed' : 'Not Completed'}</button>\n    </div>\n  );\n}\n\nexport default TickBox;"],"mappings":";;AAAA,OAAOA,KAAK,MAAM,OAAO;AACzB,SAASC,QAAQ,QAAQ,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEjC,MAAMC,OAAO,GAAGA,CAAC;EAAEC;AAAK,CAAC,KAAK;EAAAC,EAAA;EAC5B,MAAM,CAACC,SAAS,EAAEC,YAAY,CAAC,GAAGP,QAAQ,CAACI,IAAI,CAACE,SAAS,CAAC;EAE1D,MAAME,eAAe,GAAG,MAAAA,CAAA,KAAY;IAClC,IAAI;MACFC,OAAO,CAACC,GAAG,CAAC,IAAI,EAAEN,IAAI,CAACO,EAAE,CAAC;MAC1B,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAE,GAAEC,OAAO,CAACC,GAAG,CAACC,mBAAoB,UAASZ,IAAI,CAACO,EAAG,YAAW,EAAE;QAC5FM,MAAM,EAAE,KAAK;QACbC,OAAO,EAAE;UACL,cAAc,EAAE;QACpB,CAAC;QACDC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC;UAAEf,SAAS,EAAE,CAACA;QAAU,CAAC;MAClD,CAAC,CAAC;MACA,IAAI,CAACM,QAAQ,CAACU,EAAE,EAAE;QAChB,MAAM,IAAIC,KAAK,CAAC,uBAAuB,CAAC;MAC1C;MAEAd,OAAO,CAACC,GAAG,CAAC,sCAAsC,CAAC;MACnDH,YAAY,CAAC,CAACD,SAAS,CAAC;IAC1B,CAAC,CAAC,OAAOkB,KAAK,EAAE;MACdf,OAAO,CAACe,KAAK,CAAC,qBAAqB,EAAEA,KAAK,CAAC;IAC7C;EACF,CAAC;EAED,oBACEtB,OAAA;IAAAuB,QAAA,eACEvB,OAAA;MAAQwB,OAAO,EAAElB,eAAgB;MAAAiB,QAAA,EAAEnB,SAAS,GAAG,WAAW,GAAG;IAAe;MAAAqB,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAS;EAAC;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACnF,CAAC;AAEV,CAAC;AAAAzB,EAAA,CA7BKF,OAAO;AAAA4B,EAAA,GAAP5B,OAAO;AA+Bb,eAAeA,OAAO;AAAC,IAAA4B,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}