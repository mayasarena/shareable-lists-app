{"ast":null,"code":"var _jsxFileName = \"/Users/mayamon/Desktop/dev projs/list-app/frontend/src/components/ShareListModal.js\",\n  _s = $RefreshSig$();\nimport React from 'react';\nimport { useState, useContext, useEffect } from 'react';\nimport { DataContext } from '../contexts/DataContext';\nimport { UserContext } from '../contexts/UserContext';\nimport { Overlay, Modal, TitleContainer, CancelButton, Title, Option, Form, Input, SubmitButton, SubmitButtonContainer, Message } from '../styles/Modal.styled';\n\n// Modal component for sharing a list\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ShareListModal = ({\n  setShowModal,\n  list\n}) => {\n  _s();\n  const {\n    getLists\n  } = useContext(DataContext); // Access method for updating lists\n  const [message, setMessage] = useState(''); // State variable for displaying messages\n  const {\n    user\n  } = useContext(UserContext); // Access user data from UserContext\n\n  const [sharedUserEmail, setSharedUserEmail] = useState(''); // State variable for the email of the user to share the list with\n  const [userId, setUserId] = useState(null); // State variable for the ID of the user to share the list with\n\n  // Effect hook to share the list when the user ID is set\n  useEffect(() => {\n    if (userId !== null) {\n      shareList();\n    }\n  }, [userId]);\n\n  // Function to share the list with the user\n  const shareList = async () => {\n    try {\n      if (userId === user.uid) {\n        setMessage(`You can't share a list with yourself...`); // Display error message if trying to share with oneself\n        return;\n      }\n\n      // Add shared list to the database\n      const sharedListResponse = await fetch(`${process.env.REACT_APP_SERVERURL}/shared_lists`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          list_id: list.id,\n          user_id: userId\n        })\n      });\n      if (!sharedListResponse.ok) {\n        throw new Error('Failed to add shared list');\n      }\n\n      // Update list to indicate it's shared\n      const listResponse = await fetch(`${process.env.REACT_APP_SERVERURL}/lists/${list.id}/shared`, {\n        method: 'PUT',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          shared: true\n        })\n      });\n      if (!listResponse.ok) {\n        throw new Error('Failed to update list');\n      }\n      setMessage('List successfully shared');\n      setUserId(null);\n      getLists(); // Refresh lists\n    } catch (error) {\n      setMessage(`Error sharing list: ${error}`); // Display error message\n    }\n  };\n\n  // Function to fetch user ID from email\n  const fetchUserFromEmail = async e => {\n    e.preventDefault();\n    try {\n      const response = await fetch(`${process.env.REACT_APP_SERVERURL}/users/email/${sharedUserEmail}`);\n      if (response.ok) {\n        const userData = await response.json();\n        setUserId(userData.id); // Set user ID if found\n      } else {\n        console.error('Error fetching user:', response.statusText);\n      }\n    } catch (error) {\n      console.error('Error fetching user:', error);\n    }\n  };\n\n  // Function to handle change in the input field for the email\n  const handleChange = e => {\n    const {\n      value\n    } = e.target;\n    setSharedUserEmail(value);\n  };\n\n  // Render the ShareListModal component\n  return /*#__PURE__*/_jsxDEV(Overlay, {\n    children: /*#__PURE__*/_jsxDEV(Modal, {\n      children: [/*#__PURE__*/_jsxDEV(TitleContainer, {\n        children: /*#__PURE__*/_jsxDEV(Title, {\n          children: \"Share your list\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 94,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 93,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Form, {\n        children: [/*#__PURE__*/_jsxDEV(Option, {\n          children: [\"Email:\", /*#__PURE__*/_jsxDEV(Input, {\n            required: true,\n            type: \"email\",\n            placeholder: \"share with (email)\",\n            name: \"email\",\n            value: sharedUserEmail,\n            onChange: handleChange\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 100,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 98,\n          columnNumber: 21\n        }, this), message && /*#__PURE__*/_jsxDEV(Message, {\n          children: message\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 110,\n          columnNumber: 33\n        }, this), /*#__PURE__*/_jsxDEV(SubmitButtonContainer, {\n          children: [/*#__PURE__*/_jsxDEV(CancelButton, {\n            onClick: () => {\n              setShowModal(false); // Close the modal\n              setMessage(''); // Clear message\n            },\n            children: \"Cancel\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 112,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(SubmitButton, {\n            type: \"submit\",\n            value: \"Share\",\n            onClick: fetchUserFromEmail\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 118,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 111,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 97,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 92,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 91,\n    columnNumber: 9\n  }, this);\n};\n_s(ShareListModal, \"rE4ZzDF0pF8oKz+lcPnXDtgE6RM=\");\n_c = ShareListModal;\nexport default ShareListModal;\nvar _c;\n$RefreshReg$(_c, \"ShareListModal\");","map":{"version":3,"names":["React","useState","useContext","useEffect","DataContext","UserContext","Overlay","Modal","TitleContainer","CancelButton","Title","Option","Form","Input","SubmitButton","SubmitButtonContainer","Message","jsxDEV","_jsxDEV","ShareListModal","setShowModal","list","_s","getLists","message","setMessage","user","sharedUserEmail","setSharedUserEmail","userId","setUserId","shareList","uid","sharedListResponse","fetch","process","env","REACT_APP_SERVERURL","method","headers","body","JSON","stringify","list_id","id","user_id","ok","Error","listResponse","shared","error","fetchUserFromEmail","e","preventDefault","response","userData","json","console","statusText","handleChange","value","target","children","fileName","_jsxFileName","lineNumber","columnNumber","required","type","placeholder","name","onChange","onClick","_c","$RefreshReg$"],"sources":["/Users/mayamon/Desktop/dev projs/list-app/frontend/src/components/ShareListModal.js"],"sourcesContent":["import React from 'react';\nimport { useState, useContext, useEffect } from 'react';\nimport { DataContext } from '../contexts/DataContext';\nimport { UserContext } from '../contexts/UserContext';\nimport { Overlay, Modal, TitleContainer, CancelButton, Title, Option, Form, Input, SubmitButton, SubmitButtonContainer, Message } from '../styles/Modal.styled';\n\n// Modal component for sharing a list\nconst ShareListModal = ({ setShowModal, list }) => {\n    const { getLists } = useContext(DataContext); // Access method for updating lists\n    const [message, setMessage] = useState(''); // State variable for displaying messages\n    const { user } = useContext(UserContext); // Access user data from UserContext\n\n    const [sharedUserEmail, setSharedUserEmail] = useState(''); // State variable for the email of the user to share the list with\n    const [userId, setUserId] = useState(null); // State variable for the ID of the user to share the list with\n\n    // Effect hook to share the list when the user ID is set\n    useEffect(() => {\n        if (userId !== null) {\n            shareList();\n        }\n    }, [userId]);\n\n    // Function to share the list with the user\n    const shareList = async () => {\n        try {\n            if (userId === user.uid) {\n                setMessage(`You can't share a list with yourself...`); // Display error message if trying to share with oneself\n                return;\n            }\n\n            // Add shared list to the database\n            const sharedListResponse = await fetch(`${process.env.REACT_APP_SERVERURL}/shared_lists`, {\n                method: 'POST',\n                headers: {\n                    'Content-Type': 'application/json'\n                },\n                body: JSON.stringify({\n                    list_id: list.id,\n                    user_id: userId\n                })\n            });\n            if (!sharedListResponse.ok) {\n                throw new Error('Failed to add shared list');\n            }\n\n            // Update list to indicate it's shared\n            const listResponse = await fetch(`${process.env.REACT_APP_SERVERURL}/lists/${list.id}/shared`, {\n                method: 'PUT',\n                headers: {\n                    'Content-Type': 'application/json'\n                },\n                body: JSON.stringify({ shared: true })\n            });\n\n            if (!listResponse.ok) {\n                throw new Error('Failed to update list');\n            }\n            setMessage('List successfully shared');\n            setUserId(null);\n            getLists(); // Refresh lists\n\n        } catch (error) {\n            setMessage(`Error sharing list: ${error}`); // Display error message\n        }\n    };\n\n    // Function to fetch user ID from email\n    const fetchUserFromEmail = async (e) => {\n        e.preventDefault();\n        try {\n          const response = await fetch(`${process.env.REACT_APP_SERVERURL}/users/email/${sharedUserEmail}`);\n          if (response.ok) {\n            const userData = await response.json();\n            setUserId(userData.id); // Set user ID if found\n          } else {\n            console.error('Error fetching user:', response.statusText);\n          }\n        } catch (error) {\n          console.error('Error fetching user:', error);\n        }\n    };\n\n    // Function to handle change in the input field for the email\n    const handleChange = (e) => {\n        const { value } = e.target;\n        setSharedUserEmail(value);\n    };\n\n    // Render the ShareListModal component\n    return (\n        <Overlay>\n            <Modal>\n                <TitleContainer>\n                    <Title>Share your list</Title>\n                </TitleContainer>\n\n                <Form>\n                    <Option>\n                        Email:\n                        <Input \n                            required \n                            type=\"email\"\n                            placeholder=\"share with (email)\" \n                            name=\"email\"\n                            value={sharedUserEmail} \n                            onChange={handleChange}\n                        />\n                    </Option>\n                    {/* Display message if available */}\n                    {message && <Message>{message}</Message>}\n                    <SubmitButtonContainer>\n                        <CancelButton onClick={() => {\n                            setShowModal(false); // Close the modal\n                            setMessage(''); // Clear message\n                        }}>\n                            Cancel\n                        </CancelButton>\n                        <SubmitButton type=\"submit\" value=\"Share\" onClick={fetchUserFromEmail} />\n                    </SubmitButtonContainer>\n                </Form>\n            </Modal>\n        </Overlay>\n    );\n};\n\nexport default ShareListModal;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}