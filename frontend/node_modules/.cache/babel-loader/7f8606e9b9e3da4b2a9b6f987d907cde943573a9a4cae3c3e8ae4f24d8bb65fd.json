{"ast":null,"code":"var _jsxFileName = \"/Users/mayamon/Desktop/dev projs/list-app/frontend/src/components/Dashboard.js\",\n  _s = $RefreshSig$();\nimport React, { useContext } from 'react';\nimport { DataContext } from '../contexts/DataContext';\nimport ListContainer from './ListContainer';\nimport { DashboardContainer } from '../styles/Container.styled';\nimport Masonry, { ResponsiveMasonry } from 'react-responsive-masonry';\n\n// Define the Dashboard component responsible for rendering a dynamic list layout\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Dashboard = ({\n  setSelectedList\n}) => {\n  _s();\n  // Accessing lists and sharedLists from the data context\n  const {\n    lists,\n    sharedLists\n  } = useContext(DataContext);\n\n  // Render the Dashboard component with responsive Masonry layout\n  return (\n    /*#__PURE__*/\n    // Utilize ResponsiveMasonry for responsive column layout\n    _jsxDEV(ResponsiveMasonry, {\n      columnsCountBreakPoints: {\n        350: 1,\n        500: 2,\n        1300: 3\n      } // Define breakpoints for column count\n      ,\n      children: /*#__PURE__*/_jsxDEV(Masonry, {\n        children: [lists && lists.map(list => /*#__PURE__*/_jsxDEV(ListContainer, {\n          list: list,\n          setSelectedList: setSelectedList\n        }, list.id, false, {\n          fileName: _jsxFileName,\n          lineNumber: 21,\n          columnNumber: 21\n        }, this)), sharedLists && sharedLists.map(sharedList => /*#__PURE__*/_jsxDEV(ListContainer, {\n          list: sharedList,\n          setSelectedList: setSelectedList\n        }, sharedList.id, false, {\n          fileName: _jsxFileName,\n          lineNumber: 25,\n          columnNumber: 21\n        }, this))]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 18,\n        columnNumber: 13\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 15,\n      columnNumber: 9\n    }, this)\n  );\n};\n_s(Dashboard, \"m7LqA+NSW8Yff6UheyEwfJlI+Cg=\");\n_c = Dashboard;\nexport default Dashboard;\nvar _c;\n$RefreshReg$(_c, \"Dashboard\");","map":{"version":3,"names":["React","useContext","DataContext","ListContainer","DashboardContainer","Masonry","ResponsiveMasonry","jsxDEV","_jsxDEV","Dashboard","setSelectedList","_s","lists","sharedLists","columnsCountBreakPoints","children","map","list","id","fileName","_jsxFileName","lineNumber","columnNumber","sharedList","_c","$RefreshReg$"],"sources":["/Users/mayamon/Desktop/dev projs/list-app/frontend/src/components/Dashboard.js"],"sourcesContent":["import React, { useContext } from 'react';\nimport { DataContext } from '../contexts/DataContext';\nimport ListContainer from './ListContainer'; \nimport { DashboardContainer } from '../styles/Container.styled';\nimport Masonry, { ResponsiveMasonry } from 'react-responsive-masonry';\n\n// Define the Dashboard component responsible for rendering a dynamic list layout\nconst Dashboard = ({ setSelectedList }) => {\n    // Accessing lists and sharedLists from the data context\n    const { lists, sharedLists } = useContext(DataContext);\n    \n    // Render the Dashboard component with responsive Masonry layout\n    return (\n        // Utilize ResponsiveMasonry for responsive column layout\n        <ResponsiveMasonry\n            columnsCountBreakPoints={{ 350: 1, 500: 2, 1300: 3 }} // Define breakpoints for column count\n        >\n            <Masonry>\n                {/* Iterate over lists and render ListContainer for each */}\n                {lists && lists.map(list => (\n                    <ListContainer key={list.id} list={list} setSelectedList={setSelectedList} />\n                ))}\n                {/* Iterate over sharedLists and render ListContainer for each shared list */}\n                {sharedLists && sharedLists.map(sharedList => (\n                    <ListContainer key={sharedList.id} list={sharedList} setSelectedList={setSelectedList} />\n                ))}\n            </Masonry>\n        </ResponsiveMasonry>\n    );\n}\n\nexport default Dashboard;"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,UAAU,QAAQ,OAAO;AACzC,SAASC,WAAW,QAAQ,yBAAyB;AACrD,OAAOC,aAAa,MAAM,iBAAiB;AAC3C,SAASC,kBAAkB,QAAQ,4BAA4B;AAC/D,OAAOC,OAAO,IAAIC,iBAAiB,QAAQ,0BAA0B;;AAErE;AAAA,SAAAC,MAAA,IAAAC,OAAA;AACA,MAAMC,SAAS,GAAGA,CAAC;EAAEC;AAAgB,CAAC,KAAK;EAAAC,EAAA;EACvC;EACA,MAAM;IAAEC,KAAK;IAAEC;EAAY,CAAC,GAAGZ,UAAU,CAACC,WAAW,CAAC;;EAEtD;EACA;IAAA;IACI;IACAM,OAAA,CAACF,iBAAiB;MACdQ,uBAAuB,EAAE;QAAE,GAAG,EAAE,CAAC;QAAE,GAAG,EAAE,CAAC;QAAE,IAAI,EAAE;MAAE,CAAE,CAAC;MAAA;MAAAC,QAAA,eAEtDP,OAAA,CAACH,OAAO;QAAAU,QAAA,GAEHH,KAAK,IAAIA,KAAK,CAACI,GAAG,CAACC,IAAI,iBACpBT,OAAA,CAACL,aAAa;UAAec,IAAI,EAAEA,IAAK;UAACP,eAAe,EAAEA;QAAgB,GAAtDO,IAAI,CAACC,EAAE;UAAAC,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAiD,CAC/E,CAAC,EAEDT,WAAW,IAAIA,WAAW,CAACG,GAAG,CAACO,UAAU,iBACtCf,OAAA,CAACL,aAAa;UAAqBc,IAAI,EAAEM,UAAW;UAACb,eAAe,EAAEA;QAAgB,GAAlEa,UAAU,CAACL,EAAE;UAAAC,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAuD,CAC3F,CAAC;MAAA;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACG;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACK;EAAC;AAE5B,CAAC;AAAAX,EAAA,CAtBKF,SAAS;AAAAe,EAAA,GAATf,SAAS;AAwBf,eAAeA,SAAS;AAAC,IAAAe,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}