{"ast":null,"code":"function _slicedToArray(arr, i) {\n  return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest();\n}\nfunction _nonIterableRest() {\n  throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}\nfunction _unsupportedIterableToArray(o, minLen) {\n  if (!o) return;\n  if (typeof o === \"string\") return _arrayLikeToArray(o, minLen);\n  var n = Object.prototype.toString.call(o).slice(8, -1);\n  if (n === \"Object\" && o.constructor) n = o.constructor.name;\n  if (n === \"Map\" || n === \"Set\") return Array.from(o);\n  if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);\n}\nfunction _arrayLikeToArray(arr, len) {\n  if (len == null || len > arr.length) len = arr.length;\n  for (var i = 0, arr2 = new Array(len); i < len; i++) {\n    arr2[i] = arr[i];\n  }\n  return arr2;\n}\nfunction _iterableToArrayLimit(arr, i) {\n  var _i = arr == null ? null : typeof Symbol !== \"undefined\" && arr[Symbol.iterator] || arr[\"@@iterator\"];\n  if (_i == null) return;\n  var _arr = [];\n  var _n = true;\n  var _d = false;\n  var _s, _e;\n  try {\n    for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) {\n      _arr.push(_s.value);\n      if (i && _arr.length === i) break;\n    }\n  } catch (err) {\n    _d = true;\n    _e = err;\n  } finally {\n    try {\n      if (!_n && _i[\"return\"] != null) _i[\"return\"]();\n    } finally {\n      if (_d) throw _e;\n    }\n  }\n  return _arr;\n}\nfunction _arrayWithHoles(arr) {\n  if (Array.isArray(arr)) return arr;\n}\nimport { useEffect, useState, useRef, useCallback, useMemo } from 'react';\nimport TimeAgo from 'javascript-time-ago';\nimport getVerboseDateFormatter from './helpers/getVerboseDateFormatter.js';\nimport { getDate } from './helpers/date.js';\nimport getTimeAgo from './helpers/getTimeAgo.js';\nimport Updater from './Updater.js';\nexport default function useTimeAgo(_ref) {\n  var date = _ref.date,\n    future = _ref.future,\n    locale = _ref.locale,\n    locales = _ref.locales,\n    timeStyle = _ref.timeStyle,\n    round = _ref.round,\n    minTimeLeft = _ref.minTimeLeft,\n    formatVerboseDate = _ref.formatVerboseDate,\n    _ref$verboseDateForma = _ref.verboseDateFormat,\n    verboseDateFormat = _ref$verboseDateForma === void 0 ? DEFAULT_VERBOSE_DATE_FORMAT : _ref$verboseDateForma,\n    updateInterval = _ref.updateInterval,\n    _ref$tick = _ref.tick,\n    tick = _ref$tick === void 0 ? true : _ref$tick,\n    nowProperty = _ref.now,\n    _ref$timeOffset = _ref.timeOffset,\n    timeOffset = _ref$timeOffset === void 0 ? 0 : _ref$timeOffset,\n    polyfill = _ref.polyfill;\n  // Get the list of preferred locales.\n  var preferredLocales = useMemo(function () {\n    // Convert `locale` to `locales`.\n    if (locale) {\n      locales = [locale];\n    } // Add `javascript-time-ago` default locale.\n\n    return locales.concat(TimeAgo.getDefaultLocale());\n  }, [locale, locales]); // Create `javascript-time-ago` formatter instance.\n\n  var timeAgo = useMemo(function () {\n    return getTimeAgo(preferredLocales, {\n      polyfill: polyfill\n    });\n  }, [preferredLocales, polyfill]); // The date or timestamp that was passed.\n  // Convert timestamp to `Date`.\n\n  date = useMemo(function () {\n    return getDate(date);\n  }, [date]); // Formats the `date`.\n\n  var formatDate = useCallback(function () {\n    var now = (nowProperty || Date.now()) - timeOffset;\n    var stopUpdates;\n    if (future) {\n      if (now >= date.getTime()) {\n        now = date.getTime();\n        stopUpdates = true;\n      }\n    }\n    if (minTimeLeft !== undefined) {\n      var maxNow = date.getTime() - minTimeLeft * 1000;\n      if (now > maxNow) {\n        now = maxNow;\n        stopUpdates = true;\n      }\n    }\n    var _timeAgo$format = timeAgo.format(date, timeStyle, {\n        getTimeToNextUpdate: true,\n        now: now,\n        future: future,\n        round: round\n      }),\n      _timeAgo$format2 = _slicedToArray(_timeAgo$format, 2),\n      formattedDate = _timeAgo$format2[0],\n      timeToNextUpdate = _timeAgo$format2[1];\n    if (stopUpdates) {\n      timeToNextUpdate = INFINITY;\n    } else {\n      // Legacy compatibility: there used to be an `updateInterval` property.\n      // That was before `getTimeToNextUpdate` feature was introduced in `javascript-time-ago`.\n      // A default interval of one minute is introduced because\n      // `getTimeToNextUpdate` feature may theoretically return `undefined`.\n      timeToNextUpdate = updateInterval || timeToNextUpdate || 60 * 1000; // A minute by default.\n    }\n    return [formattedDate, now + timeToNextUpdate];\n  }, [date, future, timeStyle, updateInterval, round, minTimeLeft, timeAgo, nowProperty]);\n  var formatDateRef = useRef();\n  formatDateRef.current = formatDate;\n  var _useMemo = useMemo(formatDate, []),\n    _useMemo2 = _slicedToArray(_useMemo, 2),\n    _formattedDate = _useMemo2[0],\n    _nextUpdateTime = _useMemo2[1];\n  var _useState = useState(_formattedDate),\n    _useState2 = _slicedToArray(_useState, 2),\n    formattedDate = _useState2[0],\n    setFormattedDate = _useState2[1];\n  var updater = useRef();\n  useEffect(function () {\n    if (tick) {\n      updater.current = Updater.add({\n        getNextValue: function getNextValue() {\n          return formatDateRef.current();\n        },\n        setValue: setFormattedDate,\n        nextUpdateTime: _nextUpdateTime\n      });\n      return function () {\n        return updater.current.stop();\n      };\n    }\n  }, [tick]);\n  useEffect(function () {\n    if (updater.current) {\n      updater.current.forceUpdate();\n    } else {\n      var _formatDate = formatDate(),\n        _formatDate2 = _slicedToArray(_formatDate, 1),\n        _formattedDate2 = _formatDate2[0];\n      setFormattedDate(_formattedDate2);\n    }\n  }, [formatDate]); // Create verbose date formatter for the tooltip text.\n\n  var verboseDateFormatter = useMemo(function () {\n    return getVerboseDateFormatter(preferredLocales, verboseDateFormat);\n  }, [preferredLocales, verboseDateFormat]); // Format verbose date for the tooltip.\n\n  var verboseDate = useMemo(function () {\n    if (formatVerboseDate) {\n      return formatVerboseDate(date);\n    }\n    return verboseDateFormatter(date);\n  }, [date, formatVerboseDate, verboseDateFormatter]);\n  return {\n    date: date,\n    formattedDate: formattedDate,\n    verboseDate: verboseDate\n  };\n} // A thousand years is practically a metaphor for \"infinity\"\n// in the context of this component.\n\nvar YEAR = 365 * 24 * 60 * 60 * 1000;\nvar INFINITY = 1000 * YEAR; // `Intl.DateTimeFormat` for verbose date.\n// Formatted date example: \"Thursday, December 20, 2012, 7:00:00 AM GMT+4\"\n\nvar DEFAULT_VERBOSE_DATE_FORMAT = {\n  weekday: 'long',\n  day: 'numeric',\n  month: 'long',\n  year: 'numeric',\n  hour: 'numeric',\n  minute: '2-digit',\n  second: '2-digit' // timeZoneName: 'short'\n};","map":{"version":3,"names":["useEffect","useState","useRef","useCallback","useMemo","TimeAgo","getVerboseDateFormatter","getDate","getTimeAgo","Updater","useTimeAgo","_ref","date","future","locale","locales","timeStyle","round","minTimeLeft","formatVerboseDate","_ref$verboseDateForma","verboseDateFormat","DEFAULT_VERBOSE_DATE_FORMAT","updateInterval","_ref$tick","tick","nowProperty","now","_ref$timeOffset","timeOffset","polyfill","preferredLocales","concat","getDefaultLocale","timeAgo","formatDate","Date","stopUpdates","getTime","undefined","maxNow","_timeAgo$format","format","getTimeToNextUpdate","_timeAgo$format2","_slicedToArray","formattedDate","timeToNextUpdate","INFINITY","formatDateRef","current","_useMemo","_useMemo2","_formattedDate","_nextUpdateTime","_useState","_useState2","setFormattedDate","updater","add","getNextValue","setValue","nextUpdateTime","stop","forceUpdate","_formatDate","_formatDate2","_formattedDate2","verboseDateFormatter","verboseDate","YEAR","weekday","day","month","year","hour","minute","second"],"sources":["/Users/mayamon/Desktop/dev projs/list-app/frontend/node_modules/react-time-ago/source/useTimeAgo.js"],"sourcesContent":["import { useEffect, useState, useRef, useCallback, useMemo } from 'react'\r\nimport TimeAgo from 'javascript-time-ago'\r\n\r\nimport getVerboseDateFormatter from './helpers/getVerboseDateFormatter.js'\r\nimport { getDate } from './helpers/date.js'\r\nimport getTimeAgo from './helpers/getTimeAgo.js'\r\n\r\nimport Updater from './Updater.js'\r\n\r\nexport default function useTimeAgo({\r\n\t// `date: Date` or `timestamp: number`.\r\n\t// E.g. `new Date()` or `1355972400000`.\r\n\tdate,\r\n\r\n\t// If set to `true`, then will stop at \"zero point\"\r\n\t// when going from future dates to past dates.\r\n\t// In other words, even if the `date` has passed,\r\n\t// it will still render as if `date` is `now`.\r\n\tfuture,\r\n\r\n\t// Preferred locale.\r\n\t// Is 'en' by default.\r\n\t// E.g. 'ru-RU'.\r\n\tlocale,\r\n\r\n\t// Alternatively to `locale`, one could pass `locales`:\r\n\t// A list of preferred locales (ordered).\r\n\t// Will choose the first supported locale from the list.\r\n\t// E.g. `['ru-RU', 'en-GB']`.\r\n\tlocales,\r\n\r\n\t// Date/time formatting style.\r\n\t// See `javascript-time-ago` docs on \"Styles\" for more info.\r\n\t// E.g. 'round', 'round-minute', 'twitter', 'twitter-first-minute'.\r\n\ttimeStyle,\r\n\r\n\t// `round` parameter of `javascript-time-ago`.\r\n\t// See `javascript-time-ago` docs on \"Rounding\" for more info.\r\n\t// Examples: \"round\", \"floor\".\r\n\tround,\r\n\r\n\t// If specified, the time won't \"tick\" past this threshold (in seconds).\r\n\t// For example, if `minTimeLeft` is `60 * 60`\r\n\t// then the time won't \"tick\" past \"in 1 hour\".\r\n\tminTimeLeft,\r\n\r\n\t// Verbose date formatter.\r\n\t// By default it's `(date) => new Intl.DateTimeFormat(locale, {…}).format(date)`.\r\n\tformatVerboseDate,\r\n\r\n\t// `Intl.DateTimeFormat` format for formatting verbose date.\r\n\t// See `Intl.DateTimeFormat` docs for more info.\r\n\tverboseDateFormat = DEFAULT_VERBOSE_DATE_FORMAT,\r\n\r\n\t// (deprecated)\r\n\t// How often the component refreshes itself.\r\n\t// When not provided, will use `getNextTimeToUpdate()` feature\r\n\t// of `javascript-time-ago` styles to determine the update interval.\r\n\tupdateInterval,\r\n\r\n\t// Set to `false` to disable automatic refresh of the component.\r\n\t// Is `true` by default.\r\n\t// I guess no one actually turns auto-update off, so this parameter is deprecated.\r\n\ttick = true,\r\n\r\n\t// \"Now\" timestamp.\r\n\t// E.g. `Date.now()`.\r\n\tnow: nowProperty,\r\n\r\n\t// Allows offsetting the `date` by an arbitrary amount of milliseconds.\r\n\t// https://gitlab.com/catamphetamine/react-time-ago/-/issues/4\r\n\ttimeOffset = 0,\r\n\r\n\t// Pass `false` to use native `Intl.RelativeTimeFormat` / `Intl.PluralRules`\r\n\t// instead of the polyfilled ones in `javascript-time-ago`.\r\n\t// The default value is `true` meaning that it uses polyfills for\r\n\t// `Intl.RelativeTimeFormat` / `Intl.PluralRules` (polyfills are from `javascript-time-ago`).\r\n\tpolyfill\r\n}) {\r\n\t// Get the list of preferred locales.\r\n\tconst preferredLocales = useMemo(() => {\r\n\t\t// Convert `locale` to `locales`.\r\n\t\tif (locale) {\r\n\t\t\tlocales = [locale]\r\n\t\t}\r\n\t\t// Add `javascript-time-ago` default locale.\r\n\t\treturn locales.concat(TimeAgo.getDefaultLocale())\r\n\t}, [\r\n\t\tlocale,\r\n\t\tlocales\r\n\t])\r\n\r\n\t// Create `javascript-time-ago` formatter instance.\r\n\tconst timeAgo = useMemo(() => {\r\n\t\treturn getTimeAgo(preferredLocales, { polyfill })\r\n\t}, [\r\n\t\tpreferredLocales,\r\n\t\tpolyfill\r\n\t])\r\n\r\n\t// The date or timestamp that was passed.\r\n\t// Convert timestamp to `Date`.\r\n\tdate = useMemo(() => getDate(date), [date])\r\n\r\n\t// Formats the `date`.\r\n\tconst formatDate = useCallback(() => {\r\n\t\tlet now = (nowProperty || Date.now()) - timeOffset\r\n\t\tlet stopUpdates\r\n\t\tif (future) {\r\n\t\t\tif (now >= date.getTime()) {\r\n\t\t\t\tnow = date.getTime()\r\n\t\t\t\tstopUpdates = true\r\n\t\t\t}\r\n\t\t}\r\n\t\tif (minTimeLeft !== undefined) {\r\n\t\t\tconst maxNow = date.getTime() - minTimeLeft * 1000\r\n\t\t\tif (now > maxNow) {\r\n\t\t\t\tnow = maxNow\r\n\t\t\t\tstopUpdates = true\r\n\t\t\t}\r\n\t\t}\r\n\t\tlet [formattedDate, timeToNextUpdate] = timeAgo.format(date, timeStyle, {\r\n\t\t\tgetTimeToNextUpdate: true,\r\n\t\t\tnow,\r\n\t\t\tfuture,\r\n\t\t\tround\r\n\t\t})\r\n\t\tif (stopUpdates) {\r\n\t\t\ttimeToNextUpdate = INFINITY\r\n\t\t} else {\r\n\t\t\t// Legacy compatibility: there used to be an `updateInterval` property.\r\n\t\t\t// That was before `getTimeToNextUpdate` feature was introduced in `javascript-time-ago`.\r\n\t\t\t// A default interval of one minute is introduced because\r\n\t\t\t// `getTimeToNextUpdate` feature may theoretically return `undefined`.\r\n\t\t\ttimeToNextUpdate = updateInterval || timeToNextUpdate || 60 * 1000 // A minute by default.\r\n\t\t}\r\n\t\treturn [formattedDate, now + timeToNextUpdate]\r\n\t}, [\r\n\t\tdate,\r\n\t\tfuture,\r\n\t\ttimeStyle,\r\n\t\tupdateInterval,\r\n\t\tround,\r\n\t\tminTimeLeft,\r\n\t\ttimeAgo,\r\n\t\tnowProperty\r\n\t])\r\n\r\n\tconst formatDateRef = useRef()\r\n\tformatDateRef.current = formatDate\r\n\r\n\tconst [_formattedDate, _nextUpdateTime] = useMemo(formatDate, [])\r\n\tconst [formattedDate, setFormattedDate] = useState(_formattedDate)\r\n\r\n\tconst updater = useRef()\r\n\r\n\tuseEffect(() => {\r\n\t\tif (tick) {\r\n\t\t\tupdater.current = Updater.add({\r\n\t\t\t\tgetNextValue: () => formatDateRef.current(),\r\n\t\t\t\tsetValue: setFormattedDate,\r\n\t\t\t\tnextUpdateTime: _nextUpdateTime\r\n\t\t\t})\r\n\t\t\treturn () => updater.current.stop()\r\n\t\t}\r\n\t}, [tick])\r\n\r\n\tuseEffect(() => {\r\n\t\tif (updater.current) {\r\n\t\t\tupdater.current.forceUpdate()\r\n\t\t} else {\r\n\t\t\tconst [formattedDate] = formatDate()\r\n\t\t\tsetFormattedDate(formattedDate)\r\n\t\t}\r\n\t}, [formatDate])\r\n\r\n\t// Create verbose date formatter for the tooltip text.\r\n\tconst verboseDateFormatter = useMemo(() => {\r\n\t\treturn getVerboseDateFormatter(\r\n\t\t\tpreferredLocales, \r\n\t\t\tverboseDateFormat\r\n\t\t)\r\n\t}, [\r\n\t\tpreferredLocales,\r\n\t\tverboseDateFormat\r\n\t])\r\n\r\n\t// Format verbose date for the tooltip.\r\n\tconst verboseDate = useMemo(() => {\r\n\t\tif (formatVerboseDate) {\r\n\t\t\treturn formatVerboseDate(date)\r\n\t\t}\r\n\t\treturn verboseDateFormatter(date)\r\n\t}, [\r\n\t\tdate,\r\n\t\tformatVerboseDate,\r\n\t\tverboseDateFormatter\r\n\t])\r\n\r\n\treturn {\r\n\t\tdate,\r\n\t\tformattedDate,\r\n\t\tverboseDate\r\n\t};\r\n}\r\n\r\n// A thousand years is practically a metaphor for \"infinity\"\r\n// in the context of this component.\r\nconst YEAR = 365 * 24 * 60 * 60 * 1000\r\nconst INFINITY = 1000 * YEAR\r\n\r\n// `Intl.DateTimeFormat` for verbose date.\r\n// Formatted date example: \"Thursday, December 20, 2012, 7:00:00 AM GMT+4\"\r\nconst DEFAULT_VERBOSE_DATE_FORMAT = {\r\n\tweekday: 'long',\r\n\tday: 'numeric',\r\n\tmonth: 'long',\r\n\tyear: 'numeric',\r\n\thour: 'numeric',\r\n\tminute: '2-digit',\r\n\tsecond: '2-digit'\r\n\t// timeZoneName: 'short'\r\n};"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}