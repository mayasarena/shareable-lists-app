{"ast":null,"code":"var _jsxFileName = \"/Users/mayamon/Desktop/dev projs/list-app/frontend/src/components/ShareList.js\",\n  _s = $RefreshSig$();\nimport React from 'react';\nimport { useState, useEffect, useContext } from 'react';\nimport { ShareListContainer, ShareButton, UserIcon } from '../styles/ShareList.styled';\nimport ShareListModal from './ShareListModal';\nimport { UserContext } from '../contexts/UserContext';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ShareList = ({\n  list\n}) => {\n  _s();\n  // State variables for controlling modal and shared users\n  const [showShareListModal, setShowShareListModal] = useState(false);\n  const [sharedUsers, setSharedUsers] = useState(null);\n  const {\n    user\n  } = useContext(UserContext); // Access user data from UserContext\n\n  // Function to fetch shared users of the list from the server\n  const fetchSharedUsers = async () => {\n    try {\n      const response = await fetch(`${process.env.REACT_APP_SERVERURL}/shared_lists/${list.id}/users`);\n      if (response.ok) {\n        const sharedUsersData = await response.json();\n        setSharedUsers(sharedUsersData);\n      }\n    } catch (error) {\n      console.error('Error fetching shared lists:', error);\n    }\n  };\n\n  // Fetch shared users when the list changes\n  useEffect(() => {\n    fetchSharedUsers();\n  }, [list]);\n\n  // Predefined background and text colors for user icons\n  const backgroundColors = ['#ccfab1', '#f7bece', '#f4d4ff', '#ccffed', '#bbc1fc', '#ffe0bf', '#ebebeb'];\n  const textColors = ['#4fb05f', '#b53147', '#7e2f99', '#2c8565', '#3d46a1', '#c77a28', '#b0b0b0'];\n\n  // Function to select a predetermined text color for contrast based on the background color\n  const getTextColor = backgroundColor => {\n    const index = backgroundColors.indexOf(backgroundColor);\n    return textColors[index];\n  };\n\n  // Render the ShareList component\n  return /*#__PURE__*/_jsxDEV(ShareListContainer, {\n    children: [sharedUsers === null || sharedUsers === void 0 ? void 0 : sharedUsers.map(user => {\n      return /*#__PURE__*/_jsxDEV(UserIcon, {\n        backgroundcolor: user.color ? user.color : '#ebebeb',\n        textcolor: getTextColor(user.color ? user.color : '#ebebeb'),\n        email: user.email,\n        children: user.name[0]\n      }, user.id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 47,\n        columnNumber: 21\n      }, this);\n    }), list.owner_id === user.uid && /*#__PURE__*/_jsxDEV(ShareButton, {\n      onClick: () => setShowShareListModal(true),\n      children: \"Share\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 17\n    }, this), showShareListModal && /*#__PURE__*/_jsxDEV(ShareListModal, {\n      setShowModal: setShowShareListModal,\n      list: list\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 36\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 43,\n    columnNumber: 9\n  }, this);\n};\n_s(ShareList, \"L5sFIPeRVDZPh5p48zl8OYEXrh8=\");\n_c = ShareList;\nexport default ShareList;\nvar _c;\n$RefreshReg$(_c, \"ShareList\");","map":{"version":3,"names":["React","useState","useEffect","useContext","ShareListContainer","ShareButton","UserIcon","ShareListModal","UserContext","jsxDEV","_jsxDEV","ShareList","list","_s","showShareListModal","setShowShareListModal","sharedUsers","setSharedUsers","user","fetchSharedUsers","response","fetch","process","env","REACT_APP_SERVERURL","id","ok","sharedUsersData","json","error","console","backgroundColors","textColors","getTextColor","backgroundColor","index","indexOf","children","map","backgroundcolor","color","textcolor","email","name","fileName","_jsxFileName","lineNumber","columnNumber","owner_id","uid","onClick","setShowModal","_c","$RefreshReg$"],"sources":["/Users/mayamon/Desktop/dev projs/list-app/frontend/src/components/ShareList.js"],"sourcesContent":["import React from 'react';\nimport { useState, useEffect, useContext } from 'react';\nimport { ShareListContainer, ShareButton, UserIcon } from '../styles/ShareList.styled';\nimport ShareListModal from './ShareListModal';\nimport { UserContext } from '../contexts/UserContext';\n\nconst ShareList = ({ list }) => {\n    // State variables for controlling modal and shared users\n    const [showShareListModal, setShowShareListModal] = useState(false);\n    const [sharedUsers, setSharedUsers] = useState(null);\n    const { user } = useContext(UserContext); // Access user data from UserContext\n    \n    // Function to fetch shared users of the list from the server\n    const fetchSharedUsers = async () => {\n        try {\n            const response = await fetch(`${process.env.REACT_APP_SERVERURL}/shared_lists/${list.id}/users`);\n            if (response.ok) {\n                const sharedUsersData = await response.json();\n                setSharedUsers(sharedUsersData);\n            }\n        } catch (error) {\n            console.error('Error fetching shared lists:', error);\n        }\n    };\n\n    // Fetch shared users when the list changes\n    useEffect(() => {\n        fetchSharedUsers();\n    }, [list]);\n\n    // Predefined background and text colors for user icons\n    const backgroundColors = ['#ccfab1', '#f7bece', '#f4d4ff', '#ccffed', '#bbc1fc', '#ffe0bf', '#ebebeb']\n    const textColors = ['#4fb05f', '#b53147', '#7e2f99', '#2c8565', '#3d46a1', '#c77a28', '#b0b0b0']\n\n    // Function to select a predetermined text color for contrast based on the background color\n    const getTextColor = (backgroundColor) => {\n        const index = backgroundColors.indexOf(backgroundColor);\n        return textColors[index];\n    };\n\n    // Render the ShareList component\n    return (\n        <ShareListContainer>\n            {/* Map through shared users and render user icons */}\n            {sharedUsers?.map((user) => {\n                return (\n                    <UserIcon \n                        key={user.id} \n                        backgroundcolor={user.color ? user.color : '#ebebeb'}\n                        textcolor={getTextColor(user.color ? user.color : '#ebebeb')}\n                        email={user.email}\n                    >\n                        { user.name[0] } \n                    </UserIcon>\n                );\n            })}\n            {/* Render share button if the current user is the owner of the list */}\n            {(list.owner_id === user.uid) && (\n                <ShareButton onClick={() => setShowShareListModal(true)}>Share</ShareButton>\n            )}\n            {/* Render ShareListModal component if showShareListModal is true */}\n            {showShareListModal && <ShareListModal setShowModal={setShowShareListModal} list={list} />}\n        </ShareListContainer>\n  );\n}\n\n\nexport default ShareList;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}