{"ast":null,"code":"var _jsxFileName = \"/Users/mayamon/Desktop/dev projs/list-app/frontend/src/components/ShareListModal.js\",\n  _s = $RefreshSig$();\nimport React from 'react';\nimport { useState, useContext, useEffect } from 'react';\nimport { DataContext } from '../contexts/DataContext';\nimport { UserContext } from '../contexts/UserContext';\nimport { Overlay, Modal, TitleContainer, CancelButton, Title, Option, Form, Input, SubmitButton, ButtonContainer, DeleteButton, DeleteButtonContainer, SubmitButtonContainer } from '../styles/Modal.styled';\n\n// The modal sharing a list\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ShareListModal = ({\n  setShowModal,\n  list\n}) => {\n  _s();\n  const {\n    getLists\n  } = useContext(DataContext);\n  const [message, setMessage] = useState('');\n  const {\n    user\n  } = useContext(UserContext);\n  const [sharedUserEmail, setSharedUserEmail] = useState('');\n  const [userId, setUserId] = useState(null);\n  useEffect(() => {\n    if (userId !== null) {\n      shareList();\n    }\n  }, [userId]);\n  const shareList = async () => {\n    try {\n      if (userId === user.uid) {\n        setMessage(`You can't share a list with yourself...`);\n        return;\n      }\n      const sharedListResponse = await fetch(`${process.env.REACT_APP_SERVERURL}/shared_lists`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          list_id: list.id,\n          user_id: userId\n        })\n      });\n      if (!sharedListResponse.ok) {\n        throw new Error('Failed to add shared list');\n      }\n      const listResponse = await fetch(`${process.env.REACT_APP_SERVERURL}/lists/${list.id}/shared`, {\n        method: 'PUT',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          shared: true\n        })\n      });\n      if (!listResponse.ok) {\n        throw new Error('Failed to update list');\n      }\n      console.log('Shared list added successfully');\n      setMessage('List successfully shared');\n      setUserId(null);\n      getLists();\n    } catch (error) {\n      console.error('Error sharing list:', error);\n      setMessage(`Error sharing list: {error}`);\n    }\n  };\n  const fetchUserFromEmail = async e => {\n    e.preventDefault();\n    try {\n      const response = await fetch(`${process.env.REACT_APP_SERVERURL}/users/email/${sharedUserEmail}`);\n      if (response.ok) {\n        const userData = await response.json();\n        setUserId(userData.id);\n      } else {\n        console.error('Error fetching user:', response.statusText);\n      }\n    } catch (error) {\n      console.error('Error fetching user:', error);\n    }\n  };\n  const handleChange = e => {\n    const {\n      value\n    } = e.target;\n    setSharedUserEmail(value);\n  };\n  return /*#__PURE__*/_jsxDEV(Overlay, {\n    children: /*#__PURE__*/_jsxDEV(Modal, {\n      children: [/*#__PURE__*/_jsxDEV(TitleContainer, {\n        children: [/*#__PURE__*/_jsxDEV(Title, {\n          children: \"Share your list\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 91,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => {\n            setShowModal(false);\n            setMessage('');\n          },\n          children: \"X\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 92,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 90,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n        children: [/*#__PURE__*/_jsxDEV(\"input\", {\n          required: true,\n          type: \"email\",\n          placeholder: \"share with (email)\",\n          name: \"email\",\n          value: sharedUserEmail,\n          onChange: handleChange\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 99,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 107,\n          columnNumber: 21\n        }, this), message && /*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"\",\n          children: message\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 108,\n          columnNumber: 33\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"submit\",\n          onClick: fetchUserFromEmail\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 109,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 98,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 89,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 88,\n    columnNumber: 9\n  }, this);\n};\n_s(ShareListModal, \"rE4ZzDF0pF8oKz+lcPnXDtgE6RM=\");\n_c = ShareListModal;\nexport default ShareListModal;\nvar _c;\n$RefreshReg$(_c, \"ShareListModal\");","map":{"version":3,"names":["React","useState","useContext","useEffect","DataContext","UserContext","Overlay","Modal","TitleContainer","CancelButton","Title","Option","Form","Input","SubmitButton","ButtonContainer","DeleteButton","DeleteButtonContainer","SubmitButtonContainer","jsxDEV","_jsxDEV","ShareListModal","setShowModal","list","_s","getLists","message","setMessage","user","sharedUserEmail","setSharedUserEmail","userId","setUserId","shareList","uid","sharedListResponse","fetch","process","env","REACT_APP_SERVERURL","method","headers","body","JSON","stringify","list_id","id","user_id","ok","Error","listResponse","shared","console","log","error","fetchUserFromEmail","e","preventDefault","response","userData","json","statusText","handleChange","value","target","children","fileName","_jsxFileName","lineNumber","columnNumber","onClick","required","type","placeholder","name","onChange","className","_c","$RefreshReg$"],"sources":["/Users/mayamon/Desktop/dev projs/list-app/frontend/src/components/ShareListModal.js"],"sourcesContent":["import React from 'react';\nimport { useState, useContext, useEffect } from 'react';\nimport { DataContext } from '../contexts/DataContext';\nimport { UserContext } from '../contexts/UserContext';\nimport { Overlay, Modal, TitleContainer, CancelButton, Title, Option, Form, Input, SubmitButton, ButtonContainer, DeleteButton, DeleteButtonContainer, SubmitButtonContainer } from '../styles/Modal.styled';\n\n\n// The modal sharing a list\nconst ShareListModal = ({ setShowModal, list }) => {\n    const { getLists } = useContext(DataContext);\n    const [message, setMessage] = useState('');\n    const { user } = useContext(UserContext);\n\n    const [sharedUserEmail, setSharedUserEmail] = useState('')\n    const [userId, setUserId] = useState(null)\n\n    useEffect(() => {\n        if (userId !== null) {\n            shareList();\n        }\n    }, [userId]);\n\n    const shareList = async () => {\n        try {\n            if (userId === user.uid) {\n                setMessage(`You can't share a list with yourself...`);\n                return\n            }\n\n            const sharedListResponse = await fetch(`${process.env.REACT_APP_SERVERURL}/shared_lists`, {\n                method: 'POST',\n                headers: {\n                    'Content-Type': 'application/json'\n                },\n                body: JSON.stringify({\n                    list_id: list.id,\n                    user_id: userId\n                })\n            });\n            if (!sharedListResponse.ok) {\n                throw new Error('Failed to add shared list');\n            } \n\n            const listResponse = await fetch(`${process.env.REACT_APP_SERVERURL}/lists/${list.id}/shared`, {\n                method: 'PUT',\n                headers: {\n                    'Content-Type': 'application/json'\n                },\n                body: JSON.stringify({ shared: true })\n            });\n\n            if (!listResponse.ok) {\n                throw new Error('Failed to update list');\n            }\n\n            console.log('Shared list added successfully');\n            setMessage('List successfully shared');\n            setUserId(null);\n            getLists();\n\n        } catch (error) {\n            console.error('Error sharing list:', error);\n            setMessage(`Error sharing list: {error}`);\n        }\n    };\n\n    const fetchUserFromEmail = async (e) => {\n        e.preventDefault();\n        try {\n          const response = await fetch(`${process.env.REACT_APP_SERVERURL}/users/email/${sharedUserEmail}`);\n          if (response.ok) {\n            const userData = await response.json();\n            setUserId(userData.id);\n          } else {\n            console.error('Error fetching user:', response.statusText);\n          }\n        } catch (error) {\n          console.error('Error fetching user:', error);\n        }\n    };\n\n    const handleChange = (e) => {\n        const { value } = e.target\n        setSharedUserEmail(value);\n    };\n\n    return (\n        <Overlay>\n            <Modal>\n                <TitleContainer>\n                    <Title>Share your list</Title>\n                    <button onClick={() => {\n                        setShowModal(false);\n                        setMessage('');\n                    }}>X</button>\n                </TitleContainer>\n\n                <form>\n                    <input \n                        required \n                        type=\"email\"\n                        placeholder=\"share with (email)\" \n                        name=\"email\"\n                        value={sharedUserEmail} \n                        onChange={handleChange}\n                    />\n                    <br />\n                    {message && <p className=\"\">{message}</p>}\n                    <input type=\"submit\" onClick={fetchUserFromEmail}/>\n                </form>\n            </Modal>\n        </Overlay>\n    );\n};\n\nexport default ShareListModal;"],"mappings":";;AAAA,OAAOA,KAAK,MAAM,OAAO;AACzB,SAASC,QAAQ,EAAEC,UAAU,EAAEC,SAAS,QAAQ,OAAO;AACvD,SAASC,WAAW,QAAQ,yBAAyB;AACrD,SAASC,WAAW,QAAQ,yBAAyB;AACrD,SAASC,OAAO,EAAEC,KAAK,EAAEC,cAAc,EAAEC,YAAY,EAAEC,KAAK,EAAEC,MAAM,EAAEC,IAAI,EAAEC,KAAK,EAAEC,YAAY,EAAEC,eAAe,EAAEC,YAAY,EAAEC,qBAAqB,EAAEC,qBAAqB,QAAQ,wBAAwB;;AAG5M;AAAA,SAAAC,MAAA,IAAAC,OAAA;AACA,MAAMC,cAAc,GAAGA,CAAC;EAAEC,YAAY;EAAEC;AAAK,CAAC,KAAK;EAAAC,EAAA;EAC/C,MAAM;IAAEC;EAAS,CAAC,GAAGvB,UAAU,CAACE,WAAW,CAAC;EAC5C,MAAM,CAACsB,OAAO,EAAEC,UAAU,CAAC,GAAG1B,QAAQ,CAAC,EAAE,CAAC;EAC1C,MAAM;IAAE2B;EAAK,CAAC,GAAG1B,UAAU,CAACG,WAAW,CAAC;EAExC,MAAM,CAACwB,eAAe,EAAEC,kBAAkB,CAAC,GAAG7B,QAAQ,CAAC,EAAE,CAAC;EAC1D,MAAM,CAAC8B,MAAM,EAAEC,SAAS,CAAC,GAAG/B,QAAQ,CAAC,IAAI,CAAC;EAE1CE,SAAS,CAAC,MAAM;IACZ,IAAI4B,MAAM,KAAK,IAAI,EAAE;MACjBE,SAAS,CAAC,CAAC;IACf;EACJ,CAAC,EAAE,CAACF,MAAM,CAAC,CAAC;EAEZ,MAAME,SAAS,GAAG,MAAAA,CAAA,KAAY;IAC1B,IAAI;MACA,IAAIF,MAAM,KAAKH,IAAI,CAACM,GAAG,EAAE;QACrBP,UAAU,CAAE,yCAAwC,CAAC;QACrD;MACJ;MAEA,MAAMQ,kBAAkB,GAAG,MAAMC,KAAK,CAAE,GAAEC,OAAO,CAACC,GAAG,CAACC,mBAAoB,eAAc,EAAE;QACtFC,MAAM,EAAE,MAAM;QACdC,OAAO,EAAE;UACL,cAAc,EAAE;QACpB,CAAC;QACDC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC;UACjBC,OAAO,EAAEtB,IAAI,CAACuB,EAAE;UAChBC,OAAO,EAAEhB;QACb,CAAC;MACL,CAAC,CAAC;MACF,IAAI,CAACI,kBAAkB,CAACa,EAAE,EAAE;QACxB,MAAM,IAAIC,KAAK,CAAC,2BAA2B,CAAC;MAChD;MAEA,MAAMC,YAAY,GAAG,MAAMd,KAAK,CAAE,GAAEC,OAAO,CAACC,GAAG,CAACC,mBAAoB,UAAShB,IAAI,CAACuB,EAAG,SAAQ,EAAE;QAC3FN,MAAM,EAAE,KAAK;QACbC,OAAO,EAAE;UACL,cAAc,EAAE;QACpB,CAAC;QACDC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC;UAAEO,MAAM,EAAE;QAAK,CAAC;MACzC,CAAC,CAAC;MAEF,IAAI,CAACD,YAAY,CAACF,EAAE,EAAE;QAClB,MAAM,IAAIC,KAAK,CAAC,uBAAuB,CAAC;MAC5C;MAEAG,OAAO,CAACC,GAAG,CAAC,gCAAgC,CAAC;MAC7C1B,UAAU,CAAC,0BAA0B,CAAC;MACtCK,SAAS,CAAC,IAAI,CAAC;MACfP,QAAQ,CAAC,CAAC;IAEd,CAAC,CAAC,OAAO6B,KAAK,EAAE;MACZF,OAAO,CAACE,KAAK,CAAC,qBAAqB,EAAEA,KAAK,CAAC;MAC3C3B,UAAU,CAAE,6BAA4B,CAAC;IAC7C;EACJ,CAAC;EAED,MAAM4B,kBAAkB,GAAG,MAAOC,CAAC,IAAK;IACpCA,CAAC,CAACC,cAAc,CAAC,CAAC;IAClB,IAAI;MACF,MAAMC,QAAQ,GAAG,MAAMtB,KAAK,CAAE,GAAEC,OAAO,CAACC,GAAG,CAACC,mBAAoB,gBAAeV,eAAgB,EAAC,CAAC;MACjG,IAAI6B,QAAQ,CAACV,EAAE,EAAE;QACf,MAAMW,QAAQ,GAAG,MAAMD,QAAQ,CAACE,IAAI,CAAC,CAAC;QACtC5B,SAAS,CAAC2B,QAAQ,CAACb,EAAE,CAAC;MACxB,CAAC,MAAM;QACLM,OAAO,CAACE,KAAK,CAAC,sBAAsB,EAAEI,QAAQ,CAACG,UAAU,CAAC;MAC5D;IACF,CAAC,CAAC,OAAOP,KAAK,EAAE;MACdF,OAAO,CAACE,KAAK,CAAC,sBAAsB,EAAEA,KAAK,CAAC;IAC9C;EACJ,CAAC;EAED,MAAMQ,YAAY,GAAIN,CAAC,IAAK;IACxB,MAAM;MAAEO;IAAM,CAAC,GAAGP,CAAC,CAACQ,MAAM;IAC1BlC,kBAAkB,CAACiC,KAAK,CAAC;EAC7B,CAAC;EAED,oBACI3C,OAAA,CAACd,OAAO;IAAA2D,QAAA,eACJ7C,OAAA,CAACb,KAAK;MAAA0D,QAAA,gBACF7C,OAAA,CAACZ,cAAc;QAAAyD,QAAA,gBACX7C,OAAA,CAACV,KAAK;UAAAuD,QAAA,EAAC;QAAe;UAAAC,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAO,CAAC,eAC9BjD,OAAA;UAAQkD,OAAO,EAAEA,CAAA,KAAM;YACnBhD,YAAY,CAAC,KAAK,CAAC;YACnBK,UAAU,CAAC,EAAE,CAAC;UAClB,CAAE;UAAAsC,QAAA,EAAC;QAAC;UAAAC,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAQ,CAAC;MAAA;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACD,CAAC,eAEjBjD,OAAA;QAAA6C,QAAA,gBACI7C,OAAA;UACImD,QAAQ;UACRC,IAAI,EAAC,OAAO;UACZC,WAAW,EAAC,oBAAoB;UAChCC,IAAI,EAAC,OAAO;UACZX,KAAK,EAAElC,eAAgB;UACvB8C,QAAQ,EAAEb;QAAa;UAAAI,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAC1B,CAAC,eACFjD,OAAA;UAAA8C,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAK,CAAC,EACL3C,OAAO,iBAAIN,OAAA;UAAGwD,SAAS,EAAC,EAAE;UAAAX,QAAA,EAAEvC;QAAO;UAAAwC,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAI,CAAC,eACzCjD,OAAA;UAAOoD,IAAI,EAAC,QAAQ;UAACF,OAAO,EAAEf;QAAmB;UAAAW,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAC,CAAC;MAAA;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACjD,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACJ;EAAC;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACH,CAAC;AAElB,CAAC;AAAC7C,EAAA,CAzGIH,cAAc;AAAAwD,EAAA,GAAdxD,cAAc;AA2GpB,eAAeA,cAAc;AAAC,IAAAwD,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}